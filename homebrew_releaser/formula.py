import re
from typing import Any, Dict, List, Optional

import woodchips

from homebrew_releaser.constants import LOGGER_NAME


class Formula:
    @staticmethod
    def generate_formula_data(
        owner: str,
        repo_name: str,
        repository: Dict[str, Any],
        checksums: List[Dict[str, str]],
        install: str,
        tar_url: str,
        depends_on: Optional[str] = None,
        test: Optional[str] = None,
        matrix: Optional[Dict[str, Any]] = {},
    ) -> str:
        """Generates the formula data for Homebrew.

        We attempt to ensure generated formula will pass `brew audit --strict --online` if given correct inputs:
        - Proper class name
        - 80 characters or less desc field (alphanumeric characters and does not start with an article)
        - Present homepage
        - URL points to the tar file
        - Checksum matches the url archive
        - Proper installable binary
        - Test is included
        - No version attribute if Homebrew can reliably infer the version from the tar URL (GitHub tag)
        """
        logger = woodchips.get(LOGGER_NAME)

        max_desc_field_length = 80  # `brew audit` wants no more than 80 characters in the desc field

        class_name = re.sub(r'[-_. ]+', '', repo_name.title())
        license_type = repository['license']['spdx_id']
        description = re.sub(r'[.!]+', '', repository['description'][:max_desc_field_length]).strip().capitalize()

        # If the first word of the desc is an article, we cut it out per `brew audit`
        articles = {
            'a',
            'an',
            'the',
        }
        first_word_of_desc = description.split(' ', 1)
        if first_word_of_desc[0].lower() in articles:
            description = first_word_of_desc[1].strip().capitalize()

        depends_on_content = ''

        if depends_on:
            dependencies = [dependency.strip() for dependency in depends_on.split('\n') if dependency]

            # `brew audit` wants dependencies sorted
            for dependency in sorted(dependencies):
                depends_on_content += f'  depends_on {dependency}\n'
            depends_on_content = f'\n{depends_on_content}'

        # RUBY TEMPLATE DATA TO REMAIN DOUBLE SPACED
        final_matrix_output = ""
        for checksum in checksums:
            if matrix:
                checksum_filename = next(iter(checksum))
                matrix_entry = f"""    url "{checksum[checksum_filename]['url']}\"
    sha256 "{checksum[checksum_filename]['checksum']}\""""

                darwin_amd64 = (
                    f"""  if OS.mac? && Hardware::CPU.intel?
{matrix_entry}
  end"""
                    if checksum[checksum_filename]['url'].endswith('darwin-amd64.tar.gz')
                    and matrix['darwin']['amd64'] is True
                    else ""
                )
                if darwin_amd64:
                    final_matrix_output += f'\n{darwin_amd64}'

                darwin_arm64 = (
                    f"""  if OS.mac? && Hardware::CPU.arm?
{matrix_entry}
  end"""
                    if checksum[checksum_filename]['url'].endswith('darwin-arm64.tar.gz')
                    and matrix['darwin']['arm64'] is True
                    else ""
                )
                if darwin_arm64:
                    final_matrix_output += f'\n{darwin_arm64}'

                linux_amd64 = (
                    f"""  if OS.linux? && Hardware::CPU.intel?
{matrix_entry}
  end"""
                    if checksum[checksum_filename]['url'].endswith('linux-amd64.tar.gz')
                    and matrix['linux']['amd64'] is True
                    else ""
                )
                if linux_amd64:
                    final_matrix_output += f'\n{linux_amd64}'

                linux_arm64 = (
                    f"""  if OS.linux? && Hardware::CPU.arm?
{matrix_entry}
  end"""
                    if checksum[checksum_filename]['url'].endswith('linux-arm64.tar.gz')
                    and matrix['linux']['arm64'] is True
                    else ""
                )
                if linux_arm64:
                    final_matrix_output += f'\n{linux_arm64}'

            elif not matrix:
                autogenerate_tar_checksum = checksums[0][f'{repo_name}.tar.gz'][
                    'checksum'
                ]  # Autogenerated tar URL is the first one
                auto_generate_archive_installer = (
                    f"""
  url "{tar_url}"
  sha256 "{autogenerate_tar_checksum}\""""
                    if not matrix
                    else ""
                )

        test_content = (
            f"""
  test do
    {test.strip()}
  end
end"""
            if test
            else 'end'
        )

        template = f"""# typed: false
# frozen_string_literal: true

# This file was generated by Homebrew Releaser. DO NOT EDIT.
class {class_name} < Formula
  desc "{description}"
  homepage "https://github.com/{owner}/{repo_name}"
{auto_generate_archive_installer if not matrix else "" + final_matrix_output}

  license "{license_type}"
{depends_on_content}
  def install
    {install.strip()}
  end
{test_content}
"""
        logger.debug('Homebrew formula generated successfully.')

        return template
